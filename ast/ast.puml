@startuml
namespace ast {
    interface Expression  {
        - expressionNode() 

    }
    class ExpressionStatement << (S,Aquamarine) >> {
        + Token token.Token
        + Expression Expression

        - statementNode() 

        + TokenLiteral() string
        + String() string

    }
    class Identifier << (S,Aquamarine) >> {
        + Token token.Token
        + Value string

        - expressionNode() 

        + TokenLiteral() string
        + String() string

    }
    class InfixExpression << (S,Aquamarine) >> {
        + Token token.Token
        + Left Expression
        + Operator string
        + Right Expression

        - expressionNode() 

        + TokenLiteral() string
        + String() string

    }
    class IntegerLiteral << (S,Aquamarine) >> {
        + Token token.Token
        + Value int64

        - expressionNode() 

        + TokenLiteral() string
        + String() string

    }
    class LetStatement << (S,Aquamarine) >> {
        + Token token.Token
        + Name *Identifier
        + Value Expression

        - statementNode() 

        + TokenLiteral() string
        + String() string

    }
    interface Node  {
        + TokenLiteral() string
        + String() string

    }
    class PrefixExpression << (S,Aquamarine) >> {
        + Token token.Token
        + Operator string
        + Right Expression

        - expressionNode() 

        + TokenLiteral() string
        + String() string

    }
    class Program << (S,Aquamarine) >> {
        + Statements []Statement

        + TokenLiteral() string
        + String() string

    }
    class ReturnStatement << (S,Aquamarine) >> {
        + Token token.Token
        + ReturnValue Expression

        - statementNode() 

        + TokenLiteral() string
        + String() string

    }
    interface Statement  {
        - statementNode() 

    }
}
"ast.Node" *-- "ast.Expression"
"ast.Node" *-- "ast.Statement"

"ast.Node" <|-- "ast.ExpressionStatement"
"ast.Statement" <|-- "ast.ExpressionStatement"
"ast.Expression" <|-- "ast.Identifier"
"ast.Node" <|-- "ast.Identifier"
"ast.Expression" <|-- "ast.InfixExpression"
"ast.Node" <|-- "ast.InfixExpression"
"ast.Expression" <|-- "ast.IntegerLiteral"
"ast.Node" <|-- "ast.IntegerLiteral"
"ast.Node" <|-- "ast.LetStatement"
"ast.Statement" <|-- "ast.LetStatement"
"ast.Expression" <|-- "ast.PrefixExpression"
"ast.Node" <|-- "ast.PrefixExpression"
"ast.Node" <|-- "ast.Program"
"ast.Node" <|-- "ast.ReturnStatement"
"ast.Statement" <|-- "ast.ReturnStatement"

@enduml
