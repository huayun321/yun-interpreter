@startuml
namespace parser {
    class Parser << (S,Aquamarine) >> {
        - l *lexer.Lexer
        - errors []string
        - curToken token.Token
        - peekToken token.Token
        - prefixParseFns <font color=blue>map</font>[token.TokenType]prefixParseFn
        - infixParseFns <font color=blue>map</font>[token.TokenType]infixParseFn

        - peekError(t token.TokenType) 
        - nextToken() 
        - parseStatement() ast.Statement
        - parseLetStatement() *ast.LetStatement
        - curTokenIs(t token.TokenType) bool
        - peekTokenIs(t token.TokenType) bool
        - expectPeek(t token.TokenType) bool
        - parseReturnStatement() *ast.ReturnStatement
        - registerPrefix(tokenType token.TokenType, fn prefixParseFn) 
        - registerInfix(tokenType token.TokenType, fn infixParseFn) 
        - parseExpressionStatement() *ast.ExpressionStatement
        - parseExpression(precedence int) ast.Expression
        - parseIdentifier() ast.Expression
        - parseIntegerLiteral() ast.Expression
        - noPrefixParseFnError(t token.TokenType) 
        - parsePrefixExpression() ast.Expression
        - peekPrecedence() int
        - curPrecedence() int
        - parseInfixExpression(left ast.Expression) ast.Expression

        + Errors() []string
        + ParseProgram() *ast.Program

    }
    class parser.infixParseFn << (T, #FF7700) >>  {
    }
    class parser.prefixParseFn << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>() ast.Expression" as fontcolorbluefuncfontastExpression {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(ast.Expression) ast.Expression" as fontcolorbluefuncfontastExpressionastExpression {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


"parser.fontcolorbluefuncfontastExpression" #.. "parser.prefixParseFn"
"parser.fontcolorbluefuncfontastExpressionastExpression" #.. "parser.infixParseFn"
@enduml
